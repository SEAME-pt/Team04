# yamllint disable rule:line-length
---
name: Bazel Build
on:  # yamllint disable-line rule:truthy
  pull_request:
    branches: ['*']

jobs:
  bazel_build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find affected files
        id: affected_files
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --name-only origin/${{ github.base_ref }} > affected_files.txt
          echo "Affected files:"
          cat affected_files.txt

      - name: Find affected Bazel targets
        id: bazel_targets
        run: |
          > affected_targets.txt

          while read file; do
            if [[ "$file" == *.cpp || "$file" == *.h || "$file" == *.hpp || "$file" == *.cc || "$file" == *.cxx || "$file" == *.hxx ]]; then
              echo "Finding targets for: $file"
              targets=$(bazel query --output=package "$file" || true)/...
              echo "$targets" >> affected_targets.txt
            fi
          done < affected_files.txt

          sort -u affected_targets.txt -o affected_targets.txt
          echo "Affected targets:"
          cat affected_targets.txt

          echo "targets=$(cat affected_targets.txt | tr '\n' ' ')" >> $GITHUB_ENV

      - name: Setup bazel cache
        if: env.targets != ''
        uses: actions/cache@v4
        env:
          cache-name: bazel-cache
        with:
          path: |
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ github.ref }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-development

      - name: Build affected targets
        if: env.targets != ''
        run: |
          echo "Building targets: $targets"
          bazel build ${targets}

      - name: No targets to build
        if: env.targets == ''
        run: echo "No affected Bazel targets found. Skipping build."
